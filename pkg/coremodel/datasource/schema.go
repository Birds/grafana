package datasource

import (
	"embed"
	"path/filepath"

	"github.com/grafana/grafana/pkg/cuectx"
	"github.com/grafana/thema"
)

var (
	//go:embed lineage.cue
	cueFS embed.FS

	// TODO: this should be generated by Thema.
	currentVersion = thema.SV(0, 0)
)

// Lineage returns the Thema lineage representing Grafana datasources. The
// lineage is the canonical specification of the current datasource schema, all
// prior schema versions, and the mappings that allow migration between schema
// versions.
func Lineage(lib thema.Library, opts ...thema.BindOption) (thema.Lineage, error) {
	return cuectx.LoadGrafanaInstancesWithThema(filepath.Join("pkg", "coremodel", "datasource"), cueFS, lib, opts...)
}

// Model is the canonical Go representation of the current Thema schema version
// of a Grafana datasource object.
//
// TODO: this should be generated by Thema.
type Model struct {
	Name              string                 `json:"name"`
	Type              string                 `json:"type"`
	Access            string                 `json:"access"`
	Url               string                 `json:"url"`
	Password          string                 `json:"password"`
	User              string                 `json:"user"`
	Database          string                 `json:"database"`
	BasicAuth         bool                   `json:"basicAuth"`
	BasicAuthUser     string                 `json:"basicAuthUser"`
	BasicAuthPassword string                 `json:"basicAuthPassword"`
	WithCredentials   bool                   `json:"withCredentials,omitempty"`
	IsDefault         bool                   `json:"isDefault"`
	JsonData          map[string]interface{} `json:"jsonData,omitempty"`
	SecureJsonData    map[string][]byte      `json:"secureJsonData"`
	ReadOnly          bool                   `json:"readOnly,omitempty"`

	Uid     string `json:"uid"`
	OrgId   int64  `json:"orgId"`
	Id      int64  `json:"id,omitempty"`
	Version int    `json:"version"`
}
